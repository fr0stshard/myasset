import os
import re
import json
import time
import shutil
import tempfile
from pathlib import Path
from typing import Any, Dict, List, Tuple

import streamlit as st

APP_TITLE = "MooFarmPrivate Config Editor (Full)"
DEFAULT_HIKKA_DIR = "/home/ubuntu/Hikka-master"

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ –∫–æ–¥–∞ –º–æ–¥—É–ª—è
ALLOWED_BOTS = ["1606812809", "6467105350", "6396922937", "5641915741"]  # + –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å "6770881933"
ALLOWED_NPCS = ["npc_belka", "npc_jabomraz", "npc_edinorog", "npc_djun", "npc_djun_farm", "npc_chick", "npc_bear", "npc_ejik"]
ALLOWED_EAT_CMDS = ["/cow", "–º—É –∫–æ—Ä–æ–≤–∞", "–º—É–∫"]
ALLOWED_MILK_CMDS = ["/cow", "–º—É –∫–æ—Ä–æ–≤–∞", "–º—É–∫"]
# craft_comm –≤ –∫–æ–¥–µ –∫–∞–∫ Choice, paste —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª—É—à–∫–∏; –æ—Å—Ç–∞–≤–∏–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –≤–≤–æ–¥ + –ø–æ–¥—Å–∫–∞–∑–∫–∏:
ALLOWED_CRAFT_COMM_SUGGEST = ["–º—É–≤"]  # –∏–∑ paste –¥–ª—è default
# forest_comm MultiChoice –≤ –∫–æ–¥–µ; –æ—Å—Ç–∞–≤–∏–º —Å–ø–∏—Å–æ–∫-–ø–æ–¥—Å–∫–∞–∑–∫—É:
ALLOWED_FOREST_COMM = ["–º—É–ª—Å"]

# –ü–æ–ª—è ModuleConfig ‚Üí (—Ç–∏–ø, –¥–µ—Ñ–æ–ª—Ç, –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è_–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä, –≤–∞—Ä–∏–∞–Ω—Ç—ã)
# –¢–∏–ø—ã: bool, int, str, list[str]
FIELD_SPEC: Dict[str, Tuple[str, Any, bool, List[str]]] = {
    # –û–±—â–∏–µ/–ø—Ä–æ—á–∏–µ
    "config_debug_diff_msg": ("list[str]", [], True, ["Redis", "Forest", "Eating", "Crafting", "State", "General"]),
    "config_user_tz": ("str", "UTC", False, []),
    "config_debug_msg": ("bool", False, False, []),
    "config_bot_deletemsg_inbot": ("bool", False, False, []),
    "config_bot_send_logs": ("str", "me", False, ["False", "me", "default"]),
    "config_redis_cloud_link": ("str", "", False, []),
    "config_bot_used_bot": ("list[str]", [], True, ALLOWED_BOTS),
    "config_bot_used_chat_id": ("int", 0, False, []),

    # –ê–≤—Ç–æ–µ–¥–∞
    "config_bot_auto_eat": ("bool", False, False, []),
    "config_bot_auto_eating_forest": ("bool", False, False, []),
    "config_bot_eat_use_count": ("int", 1, False, []),
    "config_bot_eat_use_item": ("str", "–±—Ä–æ–∫–∫–æ–ª–∏", False, []),
    "config_bot_eat_lvl": ("int", 50, False, []),
    "config_bot_auto_eat_command": ("list[str]", [], True, ALLOWED_EAT_CMDS),

    # –ê–≤—Ç–æ–¥–æ–π–∫–∞
    "config_bot_auto_milk": ("bool", False, False, []),
    "config_bot_auto_milk_command": ("list[str]", [], True, ALLOWED_MILK_CMDS),

    # –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç
    "config_bot_auto_craft": ("bool", False, False, []),
    "config_bot_auto_craft_count": ("int", 50, False, []),
    "config_bot_auto_craft_item_name": ("str", "–º–∞—Å–ª–æ", False, []),
    "config_bot_auto_craft_command": ("str", "–º—É–≤", False, ALLOWED_CRAFT_COMM_SUGGEST),

    # –ê–≤—Ç–æ–ª–µ—Å
    "config_bot_auto_forest": ("bool", False, False, []),
    "config_bot_auto_forest_command": ("list[str]", ["–º—É–ª—Å"], True, ALLOWED_FOREST_COMM),
    "config_bot_auto_forest_skip_npc": ("bool", True, False, []),
    "config_bot_autoforest_npcs": ("list[str]", [], True, ALLOWED_NPCS),

    # –°–∫–∏–Ω
    "config_bot_skin_show": ("bool", False, False, []),
    "config_bot_skin_strings_id": ("int", 5395592741939849449, False, []),
    "config_bot_skin_strings_hash": ("int", -7011006528981204019, False, []),
    "config_bot_skin_strings_bytes": ("str", "AQAAClpn9Gn8lOq0lTYlXzF9lctkuIA3lNI=", False, []),

    # –ö–∞–∫—Ç—É—Å
    "config_bot_auto_cactus": ("bool", True, False, []),
    "config_bot_auto_cactus_water_drink": ("bool", True, False, []),
    "config_bot_auto_cactus_water_drink_lvl": ("int", 50, False, []),
    "config_bot_auto_cactus_water_drink_click": ("int", 1, False, []),

    # –ö—É—Ä—è—Ç–Ω–∏–∫/—Ç–µ–ª—è—Ç–∞
    "config_bot_auto_baby_tabs": ("bool", False, False, []),
    "config_bot_auto_chick_house_chick_count": ("int", 0, False, []),
    "config_bot_auto_chick_house": ("bool", True, False, []),
    "config_bot_auto_chick_house_water": ("bool", True, False, []),
    "config_bot_auto_chick_house_gather": ("bool", True, False, []),

    # Humanizer ‚Äî craft
    "craft_min_day": ("int", 300, False, []),
    "craft_max_day": ("int", 1800, False, []),
    "craft_min_night": ("int", 1200, False, []),
    "craft_max_night": ("int", 3600, False, []),
    "craft_click_min_day": ("int", 1, False, []),
    "craft_click_max_day": ("int", 4, False, []),
    "craft_click_min_night": ("int", 2, False, []),
    "craft_click_max_night": ("int", 6, False, []),
    "craft_state_min_day": ("int", 1, False, []),
    "craft_state_max_day": ("int", 30, False, []),
    "craft_state_min_night": ("int", 30, False, []),
    "craft_state_max_night": ("int", 60, False, []),

    # Humanizer ‚Äî eat
    "eat_min_day": ("int", 1, False, []),
    "eat_max_day": ("int", 300, False, []),
    "eat_min_night": ("int", 300, False, []),
    "eat_max_night": ("int", 2100, False, []),
    "eat_click_min_day": ("int", 1, False, []),
    "eat_click_max_day": ("int", 7, False, []),
    "eat_click_min_night": ("int", 2, False, []),
    "eat_click_max_night": ("int", 10, False, []),
    "eat_state_min_day": ("int", 1, False, []),
    "eat_state_max_day": ("int", 1, False, []),
    "eat_state_min_night": ("int", 30, False, []),
    "eat_state_max_night": ("int", 2100, False, []),

    # Humanizer ‚Äî forest
    "forest_min_day": ("int", 72, False, []),
    "forest_max_day": ("int", 1200, False, []),
    "forest_min_night": ("int", 130, False, []),
    "forest_max_night": ("int", 3600, False, []),
    "forest_click_min_day": ("int", 1, False, []),
    "forest_click_max_day": ("int", 5, False, []),
    "forest_click_min_night": ("int", 2, False, []),
    "forest_click_max_night": ("int", 12, False, []),
    "forest_npc_min_day": ("int", 1, False, []),
    "forest_npc_max_day": ("int", 30, False, []),
    "forest_npc_min_night": ("int", 30, False, []),
    "forest_npc_max_night": ("int", 60, False, []),
    "forest_state_min_day": ("int", 1, False, []),
    "forest_state_max_day": ("int", 30, False, []),
    "forest_state_min_night": ("int", 30, False, []),
    "forest_state_max_night": ("int", 60, False, []),

    # Humanizer ‚Äî milk
    "milk_min_day": ("int", 1, False, []),
    "milk_max_day": ("int", 30, False, []),
    "milk_min_night": ("int", 130, False, []),
    "milk_max_night": ("int", 800, False, []),
    "milk_click_min_day": ("int", 1, False, []),
    "milk_click_max_day": ("int", 4, False, []),
    "milk_click_min_night": ("int", 2, False, []),
    "milk_click_max_night": ("int", 8, False, []),
    "milk_state_min_day": ("int", 1, False, []),
    "milk_state_max_day": ("int", 30, False, []),
    "milk_state_min_night": ("int", 330, False, []),
    "milk_state_max_night": ("int", 700, False, []),

    # Humanizer ‚Äî cactus
    "cactus_min_day": ("int", 1, False, []),
    "cactus_max_day": ("int", 30, False, []),
    "cactus_min_night": ("int", 30, False, []),
    "cactus_max_night": ("int", 60, False, []),
    "cactus_click_min_day": ("int", 1, False, []),
    "cactus_click_max_day": ("int", 7, False, []),
    "cactus_click_min_night": ("int", 2, False, []),
    "cactus_click_max_night": ("int", 15, False, []),
    "cactus_state_min_day": ("int", 1, False, []),
    "cactus_state_max_day": ("int", 30, False, []),
    "cactus_state_min_night": ("int", 30, False, []),
    "cactus_state_max_night": ("int", 500, False, []),

    # Humanizer ‚Äî chick house
    "chick_house_min_day": ("int", 1, False, []),
    "chick_house_max_day": ("int", 300, False, []),
    "chick_house_min_night": ("int", 300, False, []),
    "chick_house_max_night": ("int", 600, False, []),
    "chick_house_click_min_day": ("int", 1, False, []),
    "chick_house_click_max_day": ("int", 5, False, []),
    "chick_house_click_min_night": ("int", 2, False, []),
    "chick_house_click_max_night": ("int", 10, False, []),
    "chick_house_state_min_day": ("int", 1, False, []),
    "chick_house_state_max_day": ("int", 300, False, []),
    "chick_house_state_min_night": ("int", 300, False, []),
    "chick_house_state_max_night": ("int", 600, False, []),

    # –ü—Ä–æ—á–µ–µ
    "config_access_keys": ("list[str]", [], True, []),
}

LABELS = {
    "config_user_tz": "üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
    "config_debug_msg": "üêû –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–∫–ª/–≤—ã–∫–ª)",
    "config_debug_diff_msg": "üß© –û—Ç–ª–∞–¥–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
    "config_bot_send_logs": "üì¨ –ö—É–¥–∞ —Å–ª–∞—Ç—å –ª–æ–≥–∏",
    "config_bot_deletemsg_inbot": "üßπ –£–¥–∞–ª—è—Ç—å —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
    "config_redis_cloud_link": "üóÑÔ∏è Redis (URI)",
    "config_access_keys": "üîë –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞",
    "config_bot_used_bot": "ü§ñ –¶–µ–ª–µ–≤–æ–π –±–æ—Ç",
    "config_bot_used_chat_id": "üí¨ –†–∞–±–æ—á–∏–π —á–∞—Ç ID",

    # –ï–¥–∞
    "config_bot_auto_eat": "üå∏ –ê–≤—Ç–æ–µ–¥–∞",
    "config_bot_auto_eating_forest": "üå≤ –ï–¥–∞ –≤ –ª–µ—Å—É",
    "config_bot_eat_use_count": "üçΩÔ∏è –ö–æ–ª-–≤–æ –∫–ª–∏–∫–æ–≤ –µ–¥—ã",
    "config_bot_eat_use_item": "ü•ó –ü—Ä–µ–¥–º–µ—Ç –µ–¥—ã",
    "config_bot_eat_lvl": "üéöÔ∏è –£—Ä–æ–≤–µ–Ω—å –µ–¥—ã",
    "config_bot_auto_eat_command": "‚å®Ô∏è –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –µ–¥—ã",

    # –î–æ–π–∫–∞
    "config_bot_auto_milk": "ü•õ –ê–≤—Ç–æ–¥–æ–π–∫–∞",
    "config_bot_auto_milk_command": "‚å®Ô∏è –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–π–∫–∏",

    # –ö—Ä–∞—Ñ—Ç
    "config_bot_auto_craft": "üß§ –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç",
    "config_bot_auto_craft_count": "üî¢ –ö–æ–ª-–≤–æ –∫—Ä–∞—Ñ—Ç–∞",
    "config_bot_auto_craft_item_name": "üß± –ü—Ä–µ–¥–º–µ—Ç –∫—Ä–∞—Ñ—Ç–∞",
    "config_bot_auto_craft_command": "‚å®Ô∏è –ö–æ–º–∞–Ω–¥–∞ –∫—Ä–∞—Ñ—Ç–∞",

    # –õ–µ—Å
    "config_bot_auto_forest": "üå≥ –ê–≤—Ç–æ–ª–µ—Å",
    "config_bot_auto_forest_command": "‚å®Ô∏è –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–µ—Å–∞",
    "config_bot_auto_forest_skip_npc": "üö´ –ü—Ä–æ–ø—É—Å–∫ NPC",
    "config_bot_autoforest_npcs": "üßü –°–ø–∏—Å–æ–∫ NPC",

    # –°–∫–∏–Ω
    "config_bot_skin_show": "‚≠ê –ü–æ–∫–∞–∑ —Å–∫–∏–Ω–∞",
    "config_bot_skin_strings_id": "üÜî Skin ID",
    "config_bot_skin_strings_hash": "#Ô∏è‚É£ Skin hash",
    "config_bot_skin_strings_bytes": "üß¨ Skin bytes",

    # –ö–∞–∫—Ç—É—Å
    "config_bot_auto_cactus": "üåµ –ê–≤—Ç–æ–∫–∞–∫—Ç—É—Å",
    "config_bot_auto_cactus_water_drink": "üíß –ü–∏—Ç—å –≤–æ–¥—É",
    "config_bot_auto_cactus_water_drink_lvl": "üí¶ –õ–∏–º–∏—Ç –≤–æ–¥—ã (%)",
    "config_bot_auto_cactus_water_drink_click": "üëâ –ö–ª–∏–∫–∏ –≤–æ–¥—ã",

    # –ö—É—Ä—è—Ç–Ω–∏–∫/—Ç–µ–ª—è—Ç–∞
    "config_bot_auto_baby_tabs": "üçº –¢–µ–ª—è—Ç–∞ (–∞–≤—Ç–æ)",
    "config_bot_auto_chick_house": "üê£ –ö—É—Ä—è—Ç–Ω–∏–∫ (–∞–≤—Ç–æ)",
    "config_bot_auto_chick_house_chick_count": "üê• –ö–æ–ª-–≤–æ —Ü—ã–ø–ª—è—Ç",
    "config_bot_auto_chick_house_water": "üö∞ –ü–æ–ª–∏–≤ –∫—É—Ä—è—Ç–Ω–∏–∫–∞",
    "config_bot_auto_chick_house_gather": "üß∫ –°–±–æ—Ä —Å –∫—É—Ä—è—Ç–Ω–∏–∫–∞",

    # –•—É–º–∞–Ω–∞–π–∑–µ—Ä ‚Äî craft
    "craft_min_day": "‚è±Ô∏è –ö—Ä–∞—Ñ—Ç: –º–∏–Ω (–¥–µ–Ω—å)",
    "craft_max_day": "‚è±Ô∏è –ö—Ä–∞—Ñ—Ç: –º–∞–∫—Å (–¥–µ–Ω—å)",
    "craft_min_night": "üåô –ö—Ä–∞—Ñ—Ç: –º–∏–Ω (–Ω–æ—á—å)",
    "craft_max_night": "üåô –ö—Ä–∞—Ñ—Ç: –º–∞–∫—Å (–Ω–æ—á—å)",
    "craft_click_min_day": "üñ±Ô∏è –ö—Ä–∞—Ñ—Ç –∫–ª–∏–∫–∏: –º–∏–Ω (–¥–µ–Ω—å)",
    "craft_click_max_day": "üñ±Ô∏è –ö—Ä–∞—Ñ—Ç –∫–ª–∏–∫–∏: –º–∞–∫—Å (–¥–µ–Ω—å)",
    "craft_click_min_night": "üñ±Ô∏è –ö—Ä–∞—Ñ—Ç –∫–ª–∏–∫–∏: –º–∏–Ω (–Ω–æ—á—å)",
    "craft_click_max_night": "üñ±Ô∏è –ö—Ä–∞—Ñ—Ç –∫–ª–∏–∫–∏: –º–∞–∫—Å (–Ω–æ—á—å)",
    "craft_state_min_day": "üìä –ö—Ä–∞—Ñ—Ç —Å—Ç–µ–π—Ç: –º–∏–Ω (–¥–µ–Ω—å)",
    "craft_state_max_day": "üìä –ö—Ä–∞—Ñ—Ç —Å—Ç–µ–π—Ç: –º–∞–∫—Å (–¥–µ–Ω—å)",
    "craft_state_min_night": "üìä –ö—Ä–∞—Ñ—Ç —Å—Ç–µ–π—Ç: –º–∏–Ω (–Ω–æ—á—å)",
    "craft_state_max_night": "üìä –ö—Ä–∞—Ñ—Ç —Å—Ç–µ–π—Ç: –º–∞–∫—Å (–Ω–æ—á—å)",

    # –•—É–º–∞–Ω–∞–π–∑–µ—Ä ‚Äî eat
    "eat_min_day": "‚è±Ô∏è –ï–¥–∞: –º–∏–Ω (–¥–µ–Ω—å)",
    "eat_max_day": "‚è±Ô∏è –ï–¥–∞: –º–∞–∫—Å (–¥–µ–Ω—å)",
    "eat_min_night": "üåô –ï–¥–∞: –º–∏–Ω (–Ω–æ—á—å)",
    "eat_max_night": "üåô –ï–¥–∞: –º–∞–∫—Å (–Ω–æ—á—å)",
    "eat_click_min_day": "üñ±Ô∏è –ï–¥–∞ –∫–ª–∏–∫–∏: –º–∏–Ω (–¥–µ–Ω—å)",
    "eat_click_max_day": "üñ±Ô∏è –ï–¥–∞ –∫–ª–∏–∫–∏: –º–∞–∫—Å (–¥–µ–Ω—å)",
    "eat_click_min_night": "üñ±Ô∏è –ï–¥–∞ –∫–ª–∏–∫–∏: –º–∏–Ω (–Ω–æ—á—å)",
    "eat_click_max_night": "üñ±Ô∏è –ï–¥–∞ –∫–ª–∏–∫–∏: –º–∞–∫—Å (–Ω–æ—á—å)",
    "eat_state_min_day": "üìä –ï–¥–∞ —Å—Ç–µ–π—Ç: –º–∏–Ω (–¥–µ–Ω—å)",
    "eat_state_max_day": "üìä –ï–¥–∞ —Å—Ç–µ–π—Ç: –º–∞–∫—Å (–¥–µ–Ω—å)",
    "eat_state_min_night": "üìä –ï–¥–∞ —Å—Ç–µ–π—Ç: –º–∏–Ω (–Ω–æ—á—å)",
    "eat_state_max_night": "üìä –ï–¥–∞ —Å—Ç–µ–π—Ç: –º–∞–∫—Å (–Ω–æ—á—å)",

    # –•—É–º–∞–Ω–∞–π–∑–µ—Ä ‚Äî forest
    "forest_min_day": "‚è±Ô∏è –õ–µ—Å: –º–∏–Ω (–¥–µ–Ω—å)",
    "forest_max_day": "‚è±Ô∏è –õ–µ—Å: –º–∞–∫—Å (–¥–µ–Ω—å)",
    "forest_min_night": "üåô –õ–µ—Å: –º–∏–Ω (–Ω–æ—á—å)",
    "forest_max_night": "üåô –õ–µ—Å: –º–∞–∫—Å (–Ω–æ—á—å)",
    "forest_click_min_day": "üñ±Ô∏è –õ–µ—Å –∫–ª–∏–∫–∏: –º–∏–Ω (–¥–µ–Ω—å)",
    "forest_click_max_day": "üñ±Ô∏è –õ–µ—Å –∫–ª–∏–∫–∏: –º–∞–∫—Å (–¥–µ–Ω—å)",
    "forest_click_min_night": "üñ±Ô∏è –õ–µ—Å –∫–ª–∏–∫–∏: –º–∏–Ω (–Ω–æ—á—å)",
    "forest_click_max_night": "üñ±Ô∏è –õ–µ—Å –∫–ª–∏–∫–∏: –º–∞–∫—Å (–Ω–æ—á—å)",
    "forest_npc_min_day": "üëæ –õ–µ—Å NPC: –º–∏–Ω (–¥–µ–Ω—å)",
    "forest_npc_max_day": "üëæ –õ–µ—Å NPC: –º–∞–∫—Å (–¥–µ–Ω—å)",
    "forest_npc_min_night": "üëæ –õ–µ—Å NPC: –º–∏–Ω (–Ω–æ—á—å)",
    "forest_npc_max_night": "üëæ –õ–µ—Å NPC: –º–∞–∫—Å (–Ω–æ—á—å)",
    "forest_state_min_day": "üìä –õ–µ—Å —Å—Ç–µ–π—Ç: –º–∏–Ω (–¥–µ–Ω—å)",
    "forest_state_max_day": "üìä –õ–µ—Å —Å—Ç–µ–π—Ç: –º–∞–∫—Å (–¥–µ–Ω—å)",
    "forest_state_min_night": "üìä –õ–µ—Å —Å—Ç–µ–π—Ç: –º–∏–Ω (–Ω–æ—á—å)",
    "forest_state_max_night": "üìä –õ–µ—Å —Å—Ç–µ–π—Ç: –º–∞–∫—Å (–Ω–æ—á—å)",

    # –•—É–º–∞–Ω–∞–π–∑–µ—Ä ‚Äî cactus
    "cactus_min_day": "‚è±Ô∏è –ö–∞–∫—Ç—É—Å: –º–∏–Ω (–¥–µ–Ω—å)",
    "cactus_max_day": "‚è±Ô∏è –ö–∞–∫—Ç—É—Å: –º–∞–∫—Å (–¥–µ–Ω—å)",
    "cactus_min_night": "üåô –ö–∞–∫—Ç—É—Å: –º–∏–Ω (–Ω–æ—á—å)",
    "cactus_max_night": "üåô –ö–∞–∫—Ç—É—Å: –º–∞–∫—Å (–Ω–æ—á—å)",
    "cactus_click_min_day": "üñ±Ô∏è –ö–∞–∫—Ç—É—Å –∫–ª–∏–∫–∏: –º–∏–Ω (–¥–µ–Ω—å)",
    "cactus_click_max_day": "üñ±Ô∏è –ö–∞–∫—Ç—É—Å –∫–ª–∏–∫–∏: –º–∞–∫—Å (–¥–µ–Ω—å)",
    "cactus_click_min_night": "üñ±Ô∏è –ö–∞–∫—Ç—É—Å –∫–ª–∏–∫–∏: –º–∏–Ω (–Ω–æ—á—å)",
    "cactus_click_max_night": "üñ±Ô∏è –ö–∞–∫—Ç—É—Å –∫–ª–∏–∫–∏: –º–∞–∫—Å (–Ω–æ—á—å)",
    "cactus_state_min_day": "üìä –ö–∞–∫—Ç—É—Å —Å—Ç–µ–π—Ç: –º–∏–Ω (–¥–µ–Ω—å)",
    "cactus_state_max_day": "üìä –ö–∞–∫—Ç—É—Å —Å—Ç–µ–π—Ç: –º–∞–∫—Å (–¥–µ–Ω—å)",
    "cactus_state_min_night": "üìä –ö–∞–∫—Ç—É—Å —Å—Ç–µ–π—Ç: –º–∏–Ω (–Ω–æ—á—å)",
    "cactus_state_max_night": "üìä –ö–∞–∫—Ç—É—Å —Å—Ç–µ–π—Ç: –º–∞–∫—Å (–Ω–æ—á—å)",
}

def find_hikka_dir(default: str) -> str:
    candidates = [os.getcwd(), str(Path.cwd().parent), default]
    for c in candidates:
        p = Path(c)
        if p.exists() and any(p.glob("config-*.json")):
            return c
    return default

def list_user_configs(root: str) -> List[Path]:
    return sorted(Path(root).glob("config-*.json"))

def derive_user_id_from_filename(p: Path) -> str:
    m = re.match(r"config-(\d+)\.json$", p.name)
    return m.group(1) if m else ""

def load_json(path: Path) -> Dict[str, Any]:
    with path.open("r", encoding="utf-8") as f:
        return json.load(f)

def save_json_atomic(path: Path, data: Dict[str, Any]) -> None:
    backup = path.with_suffix(path.suffix + f".bak.{int(time.time())}")
    shutil.copy2(path, backup)
    with tempfile.NamedTemporaryFile("w", delete=False, dir=path.parent, encoding="utf-8") as tmp:
        json.dump(data, tmp, ensure_ascii=False, indent=2)
        tmp.flush()
        os.fsync(tmp.fileno())
        tmp_name = tmp.name
    os.replace(tmp_name, path)

def get_autofarm_config(doc: Dict[str, Any]) -> Tuple[Dict[str, Any]]:
    auto = doc.get("AutoFarmbot", {})
    cfg = auto.get("__config__", {})
    return cfg,

def set_autofarm_config(doc: Dict[str, Any], new_cfg: Dict[str, Any]) -> None:
    if "AutoFarmbot" not in doc:
        doc["AutoFarmbot"] = {}
    doc["AutoFarmbot"]["__config__"] = new_cfg

def coerce_value(type_name: str, value: Any):
    if type_name == "bool":
        if isinstance(value, bool):
            return value
        if isinstance(value, str):
            return value.strip().lower() in ("1", "true", "yes", "y", "on")
        return bool(value)
    if type_name == "int":
        try:
            return int(value)
        except Exception:
            return 0
    if type_name == "str":
        return "" if value is None else str(value)
    if type_name == "list[str]":
        if isinstance(value, list):
            return [str(x) for x in value]
        return []
    return value

def ensure_defaults(cfg: Dict[str, Any]) -> Dict[str, Any]:
    out = dict(cfg)
    for key, (typ, default, _multi, _choices) in FIELD_SPEC.items():
        if key not in out:
            out[key] = default
        else:
            out[key] = coerce_value(typ, out[key])
    return out

def render_field(key: str, spec: Tuple[str, Any, bool, List[str]], value: Any):
    typ, default, is_multi, choices = spec
    label = LABELS.get(key, key)
    if typ == "bool":
        return st.toggle(label, value=bool(value))
    if typ == "int":
        return st.number_input(label, value=int(value), step=1)
    if typ == "str":
        if choices:
            # –ü–æ–¥—Å–∫–∞–∑–∫–∏: –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ö–∏–Ω—Ç
            st.caption(f"–ü–æ–¥—Å–∫–∞–∑–∫–∏: {', '.join(choices)}")
        return st.text_input(label, value=str(value))
    if typ == "list[str]":
        if choices:
            # multiselect –ø–æ —Å–ø–∏—Å–∫—É
            current = [v for v in value if v in choices] if isinstance(value, list) else []
            return st.multiselect(label, options=choices, default=current)
        # –∏–Ω–∞—á–µ textarea –ø–æ –æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –≤ —Å—Ç—Ä–æ–∫–µ
        raw = "\n".join([str(x) for x in (value or [])])
        edited = st.text_area(label, value=raw, height=120, help="–ü–æ –æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –≤ —Å—Ç—Ä–æ–∫–µ")
        items = [line.strip() for line in edited.splitlines() if line.strip()]
        return items
    return value

UI_GROUPS: List[Tuple[str, List[str]]] = [
    ("–û–±—â–∏–µ", [
        "config_user_tz",
        "config_debug_msg",
        "config_debug_diff_msg",
        "config_bot_send_logs",
        "config_bot_deletemsg_inbot",
        "config_redis_cloud_link",
        "config_access_keys",
    ]),
    ("–ë–æ—Ç –∏ —á–∞—Ç", [
        "config_bot_used_bot",
        "config_bot_used_chat_id",
    ]),
    ("–ï–¥–∞", [
        "config_bot_auto_eat",
        "config_bot_auto_eating_forest",
        "config_bot_eat_use_count",
        "config_bot_eat_use_item",
        "config_bot_eat_lvl",
        "config_bot_auto_eat_command",
    ]),
    ("–î–æ–π–∫–∞", [
        "config_bot_auto_milk",
        "config_bot_auto_milk_command",
    ]),
    ("–ö—Ä–∞—Ñ—Ç", [
        "config_bot_auto_craft",
        "config_bot_auto_craft_count",
        "config_bot_auto_craft_item_name",
        "config_bot_auto_craft_command",
        "craft_min_day","craft_max_day","craft_min_night","craft_max_night",
        "craft_click_min_day","craft_click_max_day","craft_click_min_night","craft_click_max_night",
        "craft_state_min_day","craft_state_max_day","craft_state_min_night","craft_state_max_night",
    ]),
    ("–õ–µ—Å", [
        "config_bot_auto_forest",
        "config_bot_auto_forest_command",
        "config_bot_auto_forest_skip_npc",
        "config_bot_autoforest_npcs",
        "forest_min_day","forest_max_day","forest_min_night","forest_max_night",
        "forest_click_min_day","forest_click_max_day","forest_click_min_night","forest_click_max_night",
        "forest_npc_min_day","forest_npc_max_day","forest_npc_min_night","forest_npc_max_night",
        "forest_state_min_day","forest_state_max_day","forest_state_min_night","forest_state_max_night",
    ]),
    ("–°–∫–∏–Ω", [
        "config_bot_skin_show",
        "config_bot_skin_strings_id",
        "config_bot_skin_strings_hash",
        "config_bot_skin_strings_bytes",
    ]),
    ("–ö–∞–∫—Ç—É—Å", [
        "config_bot_auto_cactus",
        "config_bot_auto_cactus_water_drink",
        "config_bot_auto_cactus_water_drink_lvl",
        "config_bot_auto_cactus_water_drink_click",
        "cactus_min_day","cactus_max_day","cactus_min_night","cactus_max_night",
        "cactus_click_min_day","cactus_click_max_day","cactus_click_min_night","cactus_click_max_night",
        "cactus_state_min_day","cactus_state_max_day","cactus_state_min_night","cactus_state_max_night",
    ]),
    ("–ö—É—Ä—è—Ç–Ω–∏–∫/—Ç–µ–ª—è—Ç–∞", [
        "config_bot_auto_baby_tabs",
        "config_bot_auto_chick_house_chick_count",
        "config_bot_auto_chick_house",
        "config_bot_auto_chick_house_water",
        "config_bot_auto_chick_house_gather",
        "chick_house_min_day","chick_house_max_day","chick_house_min_night","chick_house_max_night",
        "chick_house_click_min_day","chick_house_click_max_day","chick_house_click_min_night","chick_house_click_max_night",
        "chick_house_state_min_day","chick_house_state_max_day","chick_house_state_min_night","chick_house_state_max_night",
    ]),
]

def main():
    st.set_page_config(page_title=APP_TITLE, layout="wide")
    st.title(APP_TITLE)

    with st.sidebar:
        st.header("–ò—Å—Ç–æ—á–Ω–∏–∫")
        detected = find_hikka_dir(DEFAULT_HIKKA_DIR)
        hikka_dir = st.text_input("Hikka directory", value=detected)
        cfg_files = list_user_configs(hikka_dir)
        options = [p.name for p in cfg_files]
        selected_name = st.selectbox("–ö–æ–Ω—Ñ–∏–≥-—Ñ–∞–π–ª", options) if options else None
        manual_user_id = st.text_input("user_id (–µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ)", value="")
        st.caption("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è config-<id>.json –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Hikka.")
        st.divider()
        st.header("–î–µ–π—Å—Ç–≤–∏—è")
        apply_hot_reload = st.checkbox("Hot-reload (–≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ Hikka –≤—Ä—É—á–Ω—É—é)", value=False)
        hot_reload_cmd = st.text_input("–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è Hikka", value=".moofarm reloadconfig")

    if not Path(hikka_dir).exists():
        st.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {hikka_dir}")
        return

    cfg_path = None
    if selected_name:
        cfg_path = Path(hikka_dir) / selected_name
    elif manual_user_id.strip():
        cfg_path = Path(hikka_dir) / f"config-{manual_user_id.strip()}.json"

    if not cfg_path or not cfg_path.exists():
        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π config-*.json –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id.")
        if cfg_files:
            st.info("–ù–∞–π–¥–µ–Ω—ã: " + ", ".join([p.name for p in cfg_files]))
        return

    st.subheader(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {cfg_path.name}")
    st.caption(str(cfg_path))

    try:
        doc = load_json(cfg_path)
    except Exception as e:
        st.exception(e)
        return

    (cfg,) = get_autofarm_config(doc)
    cfg = ensure_defaults(cfg)

    # –†–µ–Ω–¥–µ—Ä –≤—Å–µ—Ö –≥—Ä—É–ø–ø
    edited: Dict[str, Any] = {}
    for group_name, keys in UI_GROUPS:
        with st.expander(group_name, expanded=False):
            for key in keys:
                spec = FIELD_SPEC[key]
                current = cfg.get(key, spec[1])
                edited[key] = render_field(key, spec, current)

    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", type="primary"):
            try:
                new_cfg = {}
                for k, (typ, default, _m, _c) in FIELD_SPEC.items():
                    new_cfg[k] = coerce_value(typ, edited.get(k, cfg.get(k, default)))
                set_autofarm_config(doc, new_cfg)
                save_json_atomic(cfg_path, doc)
                st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ (–∞—Ç–æ–º–∞—Ä–Ω–æ, —Å–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø).")
                if apply_hot_reload:
                    st.info(f"–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ Hikka: {hot_reload_cmd}")
            except Exception as e:
                st.exception(e)
    with col2:
        if st.button("–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
            st.experimental_rerun()
    with col3:
        if st.button("–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø"):
            try:
                backup = cfg_path.with_suffix(cfg_path.suffix + f".manual.bak.{int(time.time())}")
                shutil.copy2(cfg_path, backup)
                st.success(f"–ë—ç–∫–∞–ø: {backup.name}")
            except Exception as e:
                st.exception(e)

    st.divider()
    st.subheader("–¢–µ–∫—É—â–∏–π JSON (–ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏)")
    st.json(doc)

if __name__ == "__main__":
    main()
